#!/bin/bash

# Script de d√©ploiement complet pour bot de trading r√©aliste
# Objectifs: 0.3-0.5% quotidien avec gestion des risques stricte

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration par d√©faut
PROJECT_NAME="realistic-trading-bot"
PROJECT_DIR="$(pwd)"
NODE_VERSION="18"
PAPER_TRADING_DURATION="30" # jours minimum

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©. Version requise: $NODE_VERSION+"
    fi
    
    local node_version=$(node -v | sed 's/v//' | cut -d. -f1)
    if [ "$node_version" -lt "$NODE_VERSION" ]; then
        log_error "Node.js version $NODE_VERSION+ requise (actuelle: $(node -v))"
    fi
    
    # NPM
    if ! command -v npm &> /dev/null; then
        log_error "NPM n'est pas install√©"
    fi
    
    # Git (optionnel)
    if ! command -v git &> /dev/null; then
        log_warning "Git non install√© - suivi de version indisponible"
    fi
    
    log_success "Pr√©requis valid√©s"
}

# Avertissements de s√©curit√©
show_warnings() {
    echo ""
    echo "‚ö†Ô∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "‚ö†Ô∏è  AVERTISSEMENTS IMPORTANTS - BOT DE TRADING"
    echo "‚ö†Ô∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""
    echo "üõë RISQUES FINANCIERS:"
    echo "   ‚Ä¢ Le trading automatis√© peut engendrer des pertes importantes"
    echo "   ‚Ä¢ Aucune garantie de profit, m√™me avec un backtesting positif"
    echo "   ‚Ä¢ N'investissez que ce que vous pouvez vous permettre de perdre"
    echo ""
    echo "üìã √âTAPES OBLIGATOIRES:"
    echo "   1. Backtesting complet (minimum 6 mois de donn√©es)"
    echo "   2. Paper trading $PAPER_TRADING_DURATION jours MINIMUM"
    echo "   3. Tests avec capital minimal uniquement"
    echo "   4. Surveillance continue des performances"
    echo ""
    echo "üéØ OBJECTIFS R√âALISTES:"
    echo "   ‚Ä¢ 0.3-0.5% par jour (PAS 2.5%!)"
    echo "   ‚Ä¢ Stop-loss strict √† 1.5-2%"
    echo "   ‚Ä¢ Maximum 5% du capital par trade"
    echo "   ‚Ä¢ Diversification obligatoire"
    echo ""
    
    read -p "‚ö†Ô∏è  J'ai lu et compris les risques (tapez 'COMPRIS'): " -r
    if [ "$REPLY" != "COMPRIS" ]; then
        log_error "D√©ploiement annul√© - Lecture des avertissements requise"
    fi
}

# Configuration du projet
setup_project() {
    log_info "Configuration du projet $PROJECT_NAME..."
    
    # Cr√©ation de la structure de dossiers
    mkdir -p logs/{pm2,trading,backtest,performance}
    mkdir -p config
    mkdir -p data/{historical,live}
    mkdir -p backtest_results
    mkdir -p docs
    
    # Package.json avec d√©pendances r√©alistes
    cat > package.json << EOL
{
  "name": "$PROJECT_NAME",
  "version": "1.0.0",
  "description": "Bot de trading r√©aliste - 0.3-0.5% quotidien avec gestion des risques",
  "main": "realistic_bot.js",
  "scripts": {
    "start": "node realistic_bot.js",
    "paper": "NODE_ENV=paper node realistic_bot.js",
    "backtest": "node backtesting_system.js",
    "test": "npm run backtest",
    "dev": "nodemon realistic_bot.js",
    "lint": "eslint *.js",
    "deploy": "pm2 start ecosystem.config.js",
    "stop": "pm2 stop $PROJECT_NAME",
    "logs": "pm2 logs $PROJECT_NAME",
    "monitor": "pm2 monit"
  },
  "dependencies": {
    "ws": "^8.14.2",
    "node-fetch": "^3.3.2",
    "node-cron": "^3.0.3",
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "winston": "^3.11.0",
    "chalk": "^4.1.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.2",
    "eslint": "^8.56.0"
  },
  "keywords": ["trading", "bot", "realistic", "risk-management", "paper-trading"],
  "author": "Realistic Trader",
  "license": "MIT",
  "engines": {
    "node": ">=$NODE_VERSION.0.0"
  }
}
EOL

    log_success "Structure du projet cr√©√©e"
}

# Installation des d√©pendances
install_dependencies() {
    log_info "Installation des d√©pendances..."
    
    npm install
    
    # Installation globale de PM2 si n√©cessaire
    if ! command -v pm2 &> /dev/null; then
        log_info "Installation de PM2..."
        npm install -g pm2
    fi
    
    # Installation de nodemon pour le d√©veloppement
    if ! npm list nodemon &> /dev/null; then
        npm install --save-dev nodemon
    fi
    
    log_success "D√©pendances install√©es"
}

# Configuration PM2
setup_pm2() {
    log_info "Configuration PM2..."
    
    # Configuration des logs PM2
    pm2 install pm2-logrotate || true
    pm2 set pm2-logrotate:max_size 10M
    pm2 set pm2-logrotate:retain 30
    pm2 set pm2-logrotate:compress true
    pm2 set pm2-logrotate:dateFormat YYYY-MM-DD_HH-mm-ss
    
    log_success "PM2 configur√©"
}

# Configuration des fichiers de configuration
setup_config() {
    log_info "Cr√©ation des fichiers de configuration..."
    
    # Configuration pour paper trading
    cat > config/paper.json << EOL
{
  "paperTrading": true,
  "dailyTargetMin": 0.003,
  "dailyTargetMax": 0.005,
  "stopLossPercent": 0.015,
  "maxPositionPercent": 0.05,
  "totalCapital": 10000,
  "subPortfolios": 4,
  "maxTradesPerDay": 3,
  "maxConsecutiveLosses": 3,
  "cooldownAfterLoss": 3600000,
  "symbols": ["BTCUSDT", "ETHUSDT", "ADAUSDT"],
  "logLevel": "info"
}
EOL

    # Configuration pour trading r√©el (plus conservative)
    cat > config/live.json << EOL
{
  "paperTrading": false,
  "dailyTargetMin": 0.002,
  "dailyTargetMax": 0.003,
  "stopLossPercent": 0.015,
  "maxPositionPercent": 0.03,
  "totalCapital": 1000,
  "subPortfolios": 3,
  "maxTradesPerDay": 2,
  "maxConsecutiveLosses": 2,
  "cooldownAfterLoss": 7200000,
  "symbols": ["BTCUSDT", "ETHUSDT"],
  "logLevel": "warn"
}
EOL

    # Configuration de backtesting
    cat > config/backtest.json << EOL
{
  "startDate": "2024-01-01",
  "endDate": "2024-12-31",
  "initialCapital": 10000,
  "symbols": ["BTCUSDT", "ETHUSDT", "ADAUSDT"],
  "dailyTargetMin": 0.003,
  "dailyTargetMax": 0.005,
  "stopLossPercent": 0.015,
  "maxPositionPercent": 0.05,
  "makerFee": 0.001,
  "takerFee": 0.001
}
EOL
    
    log_success "Fichiers de configuration cr√©√©s"
}

# Mise en place du syst√®me de surveillance
setup_monitoring() {
    log_info "Configuration du syst√®me de surveillance..."
    
    # Script de health check
    cat > health_check.js << 'EOL'
const fs = require('fs');
const path = require('path');

class HealthChecker {
    constructor() {
        this.checks = [];
    }
    
    async checkLogActivity() {
        try {
            const logFile = path.join(__dirname, 'logs/trading/combined.log');
            if (!fs.existsSync(logFile)) {
                return { status: 'ERROR', message: 'Log file not found' };
            }
            
            const stats = fs.statSync(logFile);
            const timeDiff = Date.now() - stats.mtime.getTime();
            
            if (timeDiff > 10 * 60 * 1000) { // 10 minutes
                return { status: 'WARNING', message: 'No recent log activity' };
            }
            
            return { status: 'OK', message: 'Log activity normal' };
        } catch (error) {
            return { status: 'ERROR', message: error.message };
        }
    }
    
    async checkPM2Status() {
        return new Promise((resolve) => {
            require('child_process').exec('pm2 status realistic-trading-bot', (error, stdout) => {
                if (error) {
                    resolve({ status: 'ERROR', message: 'PM2 process not running' });
                } else if (stdout.includes('online')) {
                    resolve({ status: 'OK', message: 'PM2 process online' });
                } else {
                    resolve({ status: 'WARNING', message: 'PM2 process status unknown' });
                }
            });
        });
    }
    
    async checkDiskSpace() {
        return new Promise((resolve) => {
            require('child_process').exec('df -h .', (error, stdout) => {
                if (error) {
                    resolve({ status: 'ERROR', message: 'Cannot check disk space' });
                } else {
                    const lines = stdout.split('\n');
                    const usage = lines[1].split(/\s+/)[4];
                    const usagePercent = parseInt(usage.replace('%', ''));
                    
                    if (usagePercent > 90) {
                        resolve({ status: 'ERROR', message: `Disk usage critical: ${usage}` });
                    } else if (usagePercent > 80) {
                        resolve({ status: 'WARNING', message: `Disk usage high: ${usage}` });
                    } else {
                        resolve({ status: 'OK', message: `Disk usage normal: ${usage}` });
                    }
                }
            });
        });
    }
    
    async runAllChecks() {
        console.log('üîç Health Check - ' + new Date().toISOString());
        console.log('‚ïê'.repeat(50));
        
        const checks = [
            { name: 'Log Activity', fn: this.checkLogActivity },
            { name: 'PM2 Status', fn: this.checkPM2Status },
            { name: 'Disk Space', fn: this.checkDiskSpace }
        ];
        
        let hasError = false;
        let hasWarning = false;
        
        for (const check of checks) {
            const result = await check.fn.call(this);
            const emoji = result.status === 'OK' ? '‚úÖ' : 
                         result.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
            
            console.log(`${emoji} ${check.name}: ${result.message}`);
            
            if (result.status === 'ERROR') hasError = true;
            if (result.status === 'WARNING') hasWarning = true;
        }
        
        console.log('‚ïê'.repeat(50));
        
        if (hasError) {
            console.log('üö® ERREURS D√âTECT√âES - Action requise');
        } else if (hasWarning) {
            console.log('‚ö†Ô∏è  Avertissements - Surveillance recommand√©e');
        } else {
            console.log('‚úÖ Tous les syst√®mes fonctionnent normalement');
        }
        
        // Log dans fichier
        const healthLog = {
            timestamp: new Date().toISOString(),
            status: hasError ? 'ERROR' : hasWarning ? 'WARNING' : 'OK',
            checks: checks.map(c => ({ name: c.name, result: c.result }))
        };
        
        fs.appendFileSync(
            path.join(__dirname, 'logs/health.log'),
            JSON.stringify(healthLog) + '\n'
        );
    }
}

// Ex√©cution
new HealthChecker().runAllChecks().catch(console.error);
EOL

    # Cron job pour surveillance
    cat > setup_monitoring.sh << 'EOL'
#!/bin/bash

# Health check toutes les 15 minutes
echo "*/15 * * * * cd $(pwd) && node health_check.js >> logs/health_cron.log 2>&1" > health_cron.txt

# Sauvegarde quotidienne des logs √† 2h du matin
echo "0 2 * * * cd $(pwd) && tar -czf logs/backup/daily_$(date +\%Y\%m\%d).tar.gz logs/trading/*.log" >> health_cron.txt

# Rapport hebdomadaire le dimanche √† 23h
echo "0 23 * * 0 cd $(pwd) && node generate_weekly_report.js" >> health_cron.txt

echo "üìã Pour activer la surveillance automatique:"
echo "   crontab health_cron.txt"
echo ""
echo "üìã Pour voir les t√¢ches cron actuelles:"
echo "   crontab -l"
EOL

    chmod +x setup_monitoring.sh
    
    # Cr√©ation du r√©pertoire de sauvegarde
    mkdir -p logs/backup
    
    log_success "Syst√®me de surveillance configur√©"
}

# Validation de la configuration
validate_setup() {
    log_info "Validation de la configuration..."
    
    local errors=0
    
    # V√©rifier les fichiers essentiels
    local required_files=(
        "realistic_bot.js"
        "backtesting_system.js"
        "ecosystem.config.js"
        "package.json"
        "config/paper.json"
        "config/live.json"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            log_error "Fichier manquant: $file"
            ((errors++))
        fi
    done
    
    # V√©rifier les dossiers
    local required_dirs=(
        "logs"
        "config"
        "data"
        "backtest_results"
    )
    
    for dir in "${required_dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            log_error "Dossier manquant: $dir"
            ((errors++))
        fi
    done
    
    if [ $errors -eq 0 ]; then
        log_success "Configuration valid√©e"
    else
        log_error "$errors erreur(s) d√©tect√©e(s)"
    fi
}

# Ex√©cution du backtesting obligatoire
run_mandatory_backtest() {
    log_info "Ex√©cution du backtesting obligatoire..."
    
    echo ""
    echo "üß™ BACKTESTING OBLIGATOIRE"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "Le backtesting doit valider votre strat√©gie AVANT tout trading."
    echo "Objectifs minimums:"
    echo "‚Ä¢ Rendement total > 5%"
    echo "‚Ä¢ Drawdown max < 20%"
    echo "‚Ä¢ Win rate > 40%"
    echo "‚Ä¢ Sharpe ratio > 0.8"
    echo ""
    
    read -p "Lancer le backtesting maintenant? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [ -f "backtesting_system.js" ]; then
            node backtesting_system.js
            
            echo ""
            read -p "Les r√©sultats du backtesting sont-ils satisfaisants? (y/N): " -n 1 -r
            echo ""
            
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log_warning "Backtesting non satisfaisant - Am√©liorer la strat√©gie avant de continuer"
                return 1
            fi
        else
            log_error "Fichier backtesting_system.js manquant"
        fi
    else
        log_warning "Backtesting ignor√© - FORTEMENT d√©conseill√©"
        read -p "Continuer quand m√™me? (y/N): " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_error "D√©ploiement annul√©"
        fi
    fi
}

# Lancement en mode paper trading
start_paper_trading() {
    log_info "Lancement en mode paper trading..."
    
    echo ""
    echo "üìù PAPER TRADING OBLIGATOIRE"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "Dur√©e minimum recommand√©e: $PAPER_TRADING_DURATION jours"
    echo "Le bot va d√©marrer en mode simulation uniquement."
    echo ""
    
    # V√©rifier que la configuration est bien en paper trading
    if ! grep -q '"paperTrading": true' config/paper.json; then
        log_error "Configuration paper trading incorrecte"
    fi
    
    # D√©marrer avec PM2
    pm2 start ecosystem.config.js --env paper
    pm2 save
    
    log_success "Bot d√©marr√© en mode paper trading"
    
    echo ""
    echo "üéõÔ∏è  COMMANDES DE SURVEILLANCE:"
    echo "   pm2 status              - Statut du bot"
    echo "   pm2 logs                - Logs en temps r√©el"
    echo "   pm2 monit               - Interface de monitoring"
    echo "   node health_check.js    - V√©rification sant√©"
    echo ""
    echo "üìä FICHIERS DE SUIVI:"
    echo "   logs/trading/trades.json     - Historique des trades"
    echo "   logs/trading/daily_stats.json - Statistiques quotidiennes"
    echo "   logs/trading/performance.json - Rapport de performance"
    echo ""
    echo "‚è∞ RAPPEL: Laisser tourner minimum $PAPER_TRADING_DURATION jours avant d'envisager le trading r√©el"
}

# G√©n√©ration de la documentation
generate_docs() {
    log_info "G√©n√©ration de la documentation..."
    
    cat > docs/README.md << EOL
# Bot de Trading R√©aliste

## üéØ Objectifs
- **0.3-0.5% de gain quotidien** (objectif r√©aliste)
- **Gestion des risques stricte** (stop-loss 1.5-2%)
- **Capital divis√© en sous-portefeuilles**
- **Paper trading obligatoire 30+ jours**

## üìã √âtapes de D√©ploiement

### 1. Backtesting (OBLIGATOIRE)
\`\`\`bash
npm run backtest
\`\`\`

### 2. Paper Trading (30+ jours)
\`\`\`bash
npm run paper
pm2 logs
\`\`\`

### 3. Trading R√©el (apr√®s validation)
‚ö†Ô∏è **Uniquement apr√®s validation du paper trading**
\`\`\`bash
# Configurer les cl√©s API dans config/live.json
npm run deploy
\`\`\`

## üìä Surveillance

### Commandes PM2
- \`pm2 status\` - Statut des processus
- \`pm2 logs\` - Logs en temps r√©el
- \`pm2 monit\` - Interface de monitoring
- \`pm2 restart realistic-trading-bot\` - Red√©marrage

### Health Check
\`\`\`bash
node health_check.js
\`\`\`

### Logs Importants
- \`logs/trading/trades.json\` - Tous les trades
- \`logs/trading/performance.json\` - M√©triques de performance
- \`logs/health.log\` - Sant√© du syst√®me

## ‚ö†Ô∏è S√©curit√©

### Configuration des Cl√©s API
1. Cr√©er des cl√©s API Binance avec permissions limit√©es
2. Restriction IP recommand√©e
3. Pas de permissions de retrait
4. Tester d'abord en testnet

### Gestion des Risques
- Maximum 5% du capital par trade
- Stop-loss obligatoire √† 1.5-2%
- Maximum 3 trades par jour
- Cooldown apr√®s pertes cons√©cutives

## üìà M√©triques de Performance

### Objectifs Minimum
- Rendement quotidien: 0.3-0.5%
- Win rate: >40%
- Drawdown max: <20%
- Sharpe ratio: >0.8

### Validation Paper Trading
Le bot doit tourner 30 jours minimum en paper trading avec:
- Performance coh√©rente avec le backtesting
- Pas de bugs ou erreurs syst√®me
- M√©triques dans les objectifs

## üö® Arr√™t d'Urgence

En cas de probl√®me:
\`\`\`bash
pm2 stop realistic-trading-bot
pm2 delete realistic-trading-bot
\`\`\`

## üìû Support

En cas de pertes importantes ou de comportement anormal:
1. Arr√™ter imm√©diatement le bot
2. Analyser les logs
3. V√©rifier la configuration
4. Contacter le support si n√©cessaire
EOL

    # Guide de d√©marrage rapide
    cat > docs/QUICKSTART.md << EOL
# D√©marrage Rapide

## 1. Installation
\`\`\`bash
git clone <repo>
cd realistic-trading-bot
./deploy.sh install
\`\`\`

## 2. Backtesting
\`\`\`bash
npm run backtest
# Analyser les r√©sultats avant de continuer
\`\`\`

## 3. Paper Trading
\`\`\`bash
npm run paper
# Laisser tourner 30+ jours
\`\`\`

## 4. Surveillance
\`\`\`bash
pm2 monit
# ou
pm2 logs
\`\`\`

## 5. Validation
Apr√®s 30 jours de paper trading, analyser:
- Performance moyenne quotidienne
- Stabilit√© du syst√®me
- Coh√©rence avec le backtesting

## 6. Trading R√©el (optionnel)
‚ö†Ô∏è **Uniquement si paper trading r√©ussi**
1. Configurer les cl√©s API
2. D√©marrer avec capital minimal
3. Surveillance continue
EOL

    log_success "Documentation g√©n√©r√©e dans docs/"
}

# Menu principal
show_menu() {
    echo ""
    echo "ü§ñ D√âPLOIEMENT BOT DE TRADING R√âALISTE"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "1. Installation compl√®te"
    echo "2. Backtesting uniquement"
    echo "3. Paper trading"
    echo "4. Configuration live trading"
    echo "5. Surveillance et logs"
    echo "6. Nettoyage"
    echo "7. Aide"
    echo "q. Quitter"
    echo ""
}

# Menu principal d'installation
main() {
    case "${1:-menu}" in
        "install")
            show_warnings
            check_prerequisites
            setup_project
            install_dependencies
            setup_pm2
            setup_config
            setup_monitoring
            validate_setup
            generate_docs
            run_mandatory_backtest
            start_paper_trading
            ;;
        "backtest")
            if [ -f "backtesting_system.js" ]; then
                node backtesting_system.js
            else
                log_error "Fichier backtesting_system.js non trouv√©"
            fi
            ;;
        "paper")
            pm2 start ecosystem.config.js --env paper
            pm2 logs
            ;;
        "live")
            log_warning "Trading r√©el - V√©rifications de s√©curit√©..."
            echo "Avez-vous:"
            echo "1. ‚úÖ Fait un backtesting complet?"
            echo "2. ‚úÖ Test√© 30+ jours en paper trading?"
            echo "3. ‚úÖ Analys√© les performances?"
            echo "4. ‚úÖ Configur√© les cl√©s API en mode restreint?"
            read -p "Toutes les √©tapes sont valid√©es? (y/N): " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                pm2 start ecosystem.config.js --env production
                log_success "Bot d√©marr√© en mode LIVE"
                log_warning "SURVEILLANCE CONTINUE REQUISE"
            else
                log_error "√âtapes de validation incompl√®tes"
            fi
            ;;
        "monitor")
            echo "üîç Options de surveillance:"
            echo "1. pm2 monit     - Interface PM2"
            echo "2. pm2 logs      - Logs temps r√©el"
            echo "3. health check  - V√©rification sant√©"
            echo "4. performance   - M√©triques"
            read -p "Choix (1-4): " -n 1 -r
            echo ""
            case $REPLY in
                1) pm2 monit ;;
                2) pm2 logs ;;
                3) node health_check.js ;;
                4) cat logs/trading/performance.json | jq . ;;
                *) log_error "Option invalide" ;;
            esac
            ;;
        "cleanup")
            log_warning "Nettoyage complet du d√©ploiement..."
            pm2 stop realistic-trading-bot 2>/dev/null || true
            pm2 delete realistic-trading-bot 2>/dev/null || true
            pm2 save
            log_success "Nettoyage termin√©"
            ;;
        "help")
            echo "Aide - Bot de Trading R√©aliste"
            echo "Usage: $0 [commande]"
            echo ""
            echo "Commandes:"
            echo "  install   - Installation compl√®te"
            echo "  backtest  - Backtesting uniquement"
            echo "  paper     - Paper trading"
            echo "  live      - Trading r√©el (apr√®s validation)"
            echo "  monitor   - Surveillance"
            echo "  cleanup   - Nettoyage"
            echo "  help      - Cette aide"
            ;;
        "menu")
            while true; do
                show_menu
                read -p "Choix: " choice
                case $choice in
                    1) main install ;;
                    2) main backtest ;;
                    3) main paper ;;
                    4) main live ;;
                    5) main monitor ;;
                    6) main cleanup ;;
                    7) main help ;;
                    q|Q) exit 0 ;;
                    *) log_error "Option invalide" ;;
                esac
            done
            ;;
        *)
            log_error "Commande inconnue: $1. Utilisez 'help' pour l'aide."
            ;;
    esac
}

# Point d'entr√©e
if [ $# -eq 0 ]; then
    main menu
else
    main "$1"
fi